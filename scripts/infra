#!/bin/bash

set -e

if [[ -n "${IMAGE_DEID_ETL_DEBUG}" ]]; then
    set -x
fi

function usage() {
    echo -n \
        "Usage: $(basename "$0") COMMAND OPTION[S]
Execute Terraform subcommands with remote state management.
"
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    if [[ "${1:-}" == "--help" ]]; then
        usage
    else
        TERRAFORM_DIR="$(dirname "$0")/../deployment/terraform"
    fi

    if [[ -n "${IMAGE_DEID_ETL_SETTINGS_BUCKET}" ]]; then
        pushd "${TERRAFORM_DIR}"

        aws s3 cp "s3://${IMAGE_DEID_ETL_SETTINGS_BUCKET}/terraform/terraform.tfvars" \
          "${IMAGE_DEID_ETL_SETTINGS_BUCKET}.tfvars"

        case "$1" in
        plan)
            # Clear stale modules & remote state, then re-initialize
            rm -rf .terraform terraform.tfstate*

            terraform init \
                -backend-config="bucket=${IMAGE_DEID_ETL_SETTINGS_BUCKET}" \
                -backend-config="key=terraform/state"

            terraform plan \
                -var-file="${IMAGE_DEID_ETL_SETTINGS_BUCKET}.tfvars" \
                -out="${IMAGE_DEID_ETL_SETTINGS_BUCKET}.tfplan"
            ;;
        apply)
            terraform apply "${IMAGE_DEID_ETL_SETTINGS_BUCKET}.tfplan"
            ;;
        *)
            echo "ERROR: I don't have support for that Terraform subcommand!"
            exit 1
            ;;
        esac

        popd
    else
        echo "ERROR: No IMAGE_DEID_ETL_SETTINGS_BUCKET variable defined."
        exit 1
    fi
fi
